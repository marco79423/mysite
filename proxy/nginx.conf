upstream mysite-frontend-dev {
  server frontend-dev:3000 fail_timeout=5s max_fails=5;
}

upstream mysite-backend-dev {
  server backend-dev:8000 fail_timeout=5s max_fails=5;
}

upstream mysite-frontend {
  server frontend:3000 fail_timeout=5s max_fails=5;
}

upstream mysite-backend {
  server backend:8000 fail_timeout=5s max_fails=5;
}


server {
  listen 80;
  server_name dev.marco79423.net;
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name marco79423.net;
  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl;
  ssl_certificate /fullchain.pem;
  ssl_certificate_key /privkey.pem;

  gzip on;
  gzip_buffers 4 16k;
  gzip_min_length 1k;     # 啟用 gzip 壓縮的最小文件，通常小於 1k 效果反而不佳
  gzip_comp_level 5;      # 壓縮的級別 1-10，數字越大壓縮效果越好，但越佔用 CPU 時間，5 是常用值
  gzip_proxied any;       # 壓縮通過代理鏈接的客戶端數據
  gzip_http_version 1.0;  # 默認為 1.1，1.0 不會壓縮，但若用 proxy_pass 進行反向代理，和 upstream server 默認採用 1.0
  gzip_types
    text/plain
    application/x-javascript
    text/javascript
    application/json
    text/css
    application/xml
    image/jpeg
    image/gif
    image/png;

  server_name dev.marco79423.net;

  root /static;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_frontend;
  }

  location ~ /(api|static)/ {
    expires 1d;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://mysite-backend-dev;
  }

  location @proxy_to_frontend {
    expires 7d;

    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    proxy_pass http://mysite-frontend-dev;
  }
}

server {
  listen 443 ssl;
  ssl_certificate /fullchain.pem;
  ssl_certificate_key /privkey.pem;

  gzip on;
  gzip_buffers 4 16k;
  gzip_min_length 1k;     # 啟用 gzip 壓縮的最小文件，通常小於 1k 效果反而不佳
  gzip_comp_level 5;      # 壓縮的級別 1-10，數字越大壓縮效果越好，但越佔用 CPU 時間，5 是常用值
  gzip_proxied any;       # 壓縮通過代理鏈接的客戶端數據
  gzip_http_version 1.0;  # 默認為 1.1，1.0 不會壓縮，但若用 proxy_pass 進行反向代理，和 upstream server 默認採用 1.0
  gzip_types
    text/plain
    application/x-javascript
    text/javascript
    application/json
    text/css
    application/xml
    image/jpeg
    image/gif
    image/png;

  server_name marco79423.net;

  root /static;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_frontend;
  }

  location ~ /(api|static)/ {
    expires 1d;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://mysite-backend;
  }

  location @proxy_to_frontend {
    expires 7d;

    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    proxy_set_header X-Forwarded-Proto https;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    proxy_pass http://mysite-frontend;
  }
}
